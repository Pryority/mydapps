import { Button, VerticalBox, StandardListView, LineEdit , HorizontalBox} from "std-widgets.slint";
import { ChainSelect } from "chains/chain_select.slint";
import { DappGrid } from "dapps/dapp_grid.slint";
import { SendSVG } from "send_svg.slint";
import { SendButton } from "send_button.slint";
import { Dapp } from "dapps/dapp.slint";
import { Chain } from "chains/chain.slint";

global App {
    in-out property <Dapp> dapp;
    in-out property <Chain> chain: {name: "Ethereum", chain_id: 1};
}

export component AppWindow inherits Window {
    title: "MyDapps";
    preferred-height: 800px;
    min-width: 400px;
    in-out property<Chain> active-chain: App.chain;
    in-out property<Dapp> active-dapp: App.dapp;
    in property <[int]> balances;
    in property <string> latest-checkpoint;
    in-out property <bool> sync-status;
    in property <string> block-number;

    callback request-all-balances <=> BALANCES_btn.clicked;
    callback request-send-tokens();
    callback select-dapp(Dapp);
    callback select-chain(Chain);
    callback dapp-changed();
    callback fetch-latest-mainnet-checkpoint();
    callback sync();
    callback latest-block-number();
    // callback get-dai-supply();

    VerticalBox {
        ChainSelect {
            select-chain => {
                // debug("AppWindow Chain: ", self.active-chain.name);
                root.select-chain(self.active-chain);
                return self.active-chain;
            }
        }


        DappGrid {
            select-dapp => {
                // debug("AppWindow Dapp: ", self.active-dapp.name);
                root.select-dapp(self.active-dapp);
                return self.active-dapp;
            }
        }

        VerticalLayout {
            Text {
                text: root.active-chain.name == "" ? "Active Chain: ---" : "Active Chain: " + root.active-chain.name;
                height: 32px;
            }

            Text {
                text: root.active-dapp.name == "" ? "Connected Dapp: ---" : "Connected Dapp: " + root.active-dapp.name;
            }
        }

        HorizontalBox {
            VerticalBox {
                min-width: 256px;

                BALANCES_btn := Button {
                    text: "Balances";
                    height: 32px;
                }
            
                HorizontalBox {
                    Button {
                        text: "Sync";
                        height: 32px;
                        clicked => {
                            root.fetch-latest-mainnet-checkpoint();
                            root.sync();
                            // root.get-block-number();
                        }
                    }
                    Button {
                        text: "⏸️";
                        clicked => {
                            root.sync-status = false;
                        }
                    }
                }

                Text {
                    text: root.sync-status == true ? "Synced" : "Paused";
                }

                Text {
                    text: "Latest Checkpoint: " + root.latest-checkpoint;
                }

                Text {
                    text: "Latest Block: " + root.block-number;
                }
            } 
            SendButton {
                request-send-tokens => {
                    root.request-send-tokens();
                }
            }
            Rectangle {
                height: 80px;
                property <bool> send_seq_active: true;
            
                // callback request-send-tokens();
                
                re := TouchArea {
                    width: 80px;
                    height: 40px;
                    clicked => {
                        send_seq_active = !send_seq_active;
                        root.request-send-tokens();
                    }
                    container := Rectangle {
                        background: re.pressed ? #248d6a : #bababa;
                        border-radius: 4px;
                        animate background {
                            duration: 20ms;
                        }
                        HorizontalBox {
                            padding-right: 40px;
                            spacing: 24px;
                            alignment: center;
                            
                            HorizontalLayout {
                                spacing: 16px;
                                btnText := Text {
                                    text: "Receive";
                                    color: re.pressed ? #0d1106 : #1e1e1e;
                                }
                            }
                        }
                    }
                } 
                states [
                    active-hover when !re.pressed && re.has-hover: {
                        container.background: #2abc8b;
                        btnText.color: #0f1308;
                    }
                ]
            }
        }
    }    
}