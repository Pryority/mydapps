import { Button, VerticalBox, StandardListView, LineEdit } from "std-widgets.slint";
import { ChainSelect } from "chains/chain_select.slint";
import { DappGrid } from "dapps/dapp_grid.slint";
import { SendSVG } from "send_svg.slint";
import { SendButton } from "send_button.slint";
import { Dapp } from "dapps/dapp.slint";
import { Chain } from "chains/chain.slint";

global App {
    in-out property <Dapp> dapp;
    in-out property <Chain> chain: {name: "Ethereum", chain_id: 1};
}

export component AppWindow inherits Window {
    title: "MyDapps";
    preferred-height: 800px;
    min-width: 400px;
    in-out property<Chain> active-chain: App.chain;
    in-out property<Dapp> active-dapp: App.dapp;
    in property <[int]> balances;
    in property <string> latest_checkpoint;
    in property <bool> sync_status;

    callback request-all-balances <=> BALANCES_btn.clicked;
    callback request-send-tokens();
    callback select-dapp(Dapp);
    callback select-chain(Chain);
    callback dapp-changed();
    callback fetch-latest-mainnet-checkpoint();
    callback sync();

    VerticalBox {
        Text {
            text: sync-status == true ? "Synced" : "Resynchronize";
        }

        ChainSelect {
            select-chain => {
                // debug("AppWindow Chain: ", self.active-chain.name);
                root.select-chain(self.active-chain);
                return self.active-chain;
            }
        }


        DappGrid {
            select-dapp => {
                debug("AppWindow Dapp: ", self.active-dapp.name);
                root.select-dapp(self.active-dapp);
                return self.active-dapp;
            }
        }

        VerticalLayout {
            Text {
                text: "Active Chain: " + root.active-chain.name; 
                height: 32px;
            }

            Text {
                text: "Connected Dapp: " + root.active-dapp.name;
            }
        }

        BALANCES_btn := Button {
            text: "Balances";
            height: 32px;
        }

        VerticalBox {
            Button {
                text: "Fetch Mainnet Checkpoint";
                clicked => {
                    root.fetch-latest-mainnet-checkpoint();
                }
            }

            Text {
                text: "Latest Checkpoint: " + root.latest-checkpoint;
            }
        } 

        SendButton {
            request-send-tokens => {
                root.request-send-tokens();
            }
        }
    }    
}